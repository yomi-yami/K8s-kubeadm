参考
https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
https://thinkit.co.jp/article/18188
ubuntuで用意

# 今回は1つずつ
control-plane
worker-1

■MACアドレスとproduct_uuidが全てのノードでユニークであることの検証 
ネットワークインターフェースのMACアドレスはip linkもしくはifconfig -aコマンドで取得できます。
# product_uuidの確認
sudo cat /sys/class/dmi/id/product_uuid

■IP固定へ
# /00-installer-config.yamlは触らない。
#マスター
sudo vi /etc/netplan/99_config.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    ens32:
      dhcp4: false
      dhcp6: false
      addresses: [192.168.11.47/24]
      gateway4: 192.168.11.1
      nameservers:
        addresses: [192.168.11.1, 8.8.8.8, 8.8.4.4]

#適用
sudo netplan apply

#マスター
sudo vi /etc/netplan/99_config.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    ens32:
      dhcp4: no
      dhcp6: no
      addresses: [192.168.11.48/24]
      gateway4: 192.168.11.1
      nameservers:
        addresses: [192.168.11.1, 8.8.8.8, 8.8.4.4]

#適用
sudo netplan apply






■タイムゾーン変更
sudo timedatectl set-timezone Asia/Tokyo
timedatectl

■open-vm-tools
sudo apt-get install open-vm-tools

■スワップ無効sudo swapoff -a
sudo vi  /etc/fstab
swapの行をコメントアウトする。

■iptablesがnftablesバックエンドを使用しないようにする 
# レガシーバイナリがインストールされていることを確認してください
sudo apt-get install -y iptables arptables ebtables

# レガシーバージョンに切り替えてください。
sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
sudo update-alternatives --set arptables /usr/sbin/arptables-legacy
sudo update-alternatives --set ebtables /usr/sbin/ebtables-legacy


■コンテナランタイムのインストール Containerd 
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# 必要なカーネルパラメータの設定をします。これらの設定値は再起動後も永続化されます。

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

■containerdのインストール
## リポジトリの設定
### HTTPS越しのリポジトリの使用をaptに許可するために、パッケージをインストール
sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
## Docker公式のGPG鍵を追加
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo  apt-key add -
## Dockerのaptリポジトリの追加
sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"
## containerdのインストール
sudo apt-get update && sudo apt-get install -y containerd.io
# containerdの設定
mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
# containerdの再起動
sudo systemctl restart containerd


■kubeadm、kubelet、kubectlのインストール 
sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


■コントロールプレーンの起動
pod-network-cidrの指定の意味はわからない。被っることがある？
sudo kubeadm init --pod-network-cidr=192.168.0.0/16

# ユーザーで実行できるようにする。
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 最後に表示されるのをメモる。
※今回の資格情報
sudo kubeadm join 192.168.11.47:6443 --token lk691a.0j7xux1d5yy8mdp6 \
        --discovery-token-ca-cert-hash sha256:b68b2c2fcb64c8ccec676055a66e5a3ca8bf32b0aa70e0c8a508f2735a8da36c

■ワーカーの追加
kubeadm、kubelet、kubectlのインストール までを実施する。
メモしたコマンドを実行する。

■確認
kubectl get nodes

表示を見るとSTATUSがNotReadyになっており、このままではkubernetesはオーケストレーションを始めることができません。
これは、ノード間でネットワークが隔離され、ノード間の各コンテナが相互に通信できなくなっているためです。
これを可能にするのがネットワークプラグイン(CNIプラグイン)です。今回は、CNIプラグインにCalicoを使用します。

# 参考かな
# https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart
■Calicoをインストールします
kubectl create -f https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml
kubectl create -f https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml

■STATUSがRunningになるまで待つ。
watch kubectl get pods -n calico-system

■STATUSがReadyになっていること確認
kubectl get nodes
kubectl get nodes -o wide



■Podを作成してコンテナを動かす
Podがないことを確認。
kubectl get pods

mkdir 20220318_test
cd ./20220318_test/
vi ./nginx.yaml
=ファイル作成==
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - image: nginx:1.17
    name: nginx
=ファイル作成==

kubectl apply -f nginx.yaml
kubectl get pods

■詳細の確認
kubectl describe pod nginx
# IPをcurlしてみる。
curl 192.168.226.66

■kubectl execコマンドを使うと、Pod内でコマンドを実行できます。
kubectl exec nginx -it  -- /bin/sh

■kubectl deleteコマンドを使うと、デプロイしたPodを削除できます。
kubectl delete pod nginx


■Podを複数配備するDeployment
vi deployment.yaml
=ファイル作成==
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.17
=ファイル作成==


kubectl apply -f deployment.yaml
kubectl get deployment,pod

# 試しに1つ手動で削除してみる。
kubectl delete pod nginx-deployment-5fbc65fff-298xx
kubectl get pod


■PodへのアクセスポイントとなるService
vi service.yaml
=ファイル作成==
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  ports:
    - port: 80
  selector:
    app: nginx
=ファイル作成==

kubectl apply -f service.yaml
